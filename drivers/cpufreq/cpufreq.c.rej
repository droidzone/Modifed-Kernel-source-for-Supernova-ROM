--- drivers/cpufreq/cpufreq.c
+++ drivers/cpufreq/cpufreq.c
@@ -652,106 +652,155 @@
 	return policy->governor->show_setspeed(policy, buf);
 }
 
-#ifdef CONFIG_CPU_FREQ_VDD_LEVELS
+/**
+ * show_scaling_driver - show the current cpufreq HW/BIOS limitation
+ */
+static ssize_t show_bios_limit(struct cpufreq_policy *policy, char *buf)
+{
+	unsigned int limit;
+	int ret;
+	if (cpufreq_driver->bios_limit) {
+		ret = cpufreq_driver->bios_limit(policy->cpu, &limit);
+		if (!ret)
+			return sprintf(buf, "%u\n", limit);
+	}
+	return sprintf(buf, "%u\n", policy->cpuinfo.max_freq);
+}
 
+#ifdef CONFIG_CPU_FREQ_VDD_LEVELS
+#ifdef CONFIG_MSM_CPU_AVS
+extern ssize_t acpuclk_get_vdd_levels_havs_str(char *buf);
+static ssize_t show_vdd_levels_havs(struct cpufreq_policy *policy, char *buf)
+{
+	return acpuclk_get_vdd_levels_havs_str(buf);
+}
+
+int	atoi(char *string) {
+  int	retCode=0;
+  int	sign=1;
+
+  while (*string != 0) {
+    if (*string=='+') {
+      sign=1;
+    } else if (*string=='-') {
+      sign=-1;
+    } else if ((*string>='0') && (*string<='9')) {
+      retCode *= 10;
+      retCode += *string-'0';
+    } else {
+      break;
+    }
+    string++;
+  }
+
+  retCode *= sign;
+
+  return (retCode);
+}
+
+#define	SEPARATORS	"\t :"
+extern void acpuclk_set_vdd_havs(unsigned acpu_khz, int min_vdd, int max_vdd);
+static ssize_t store_vdd_levels_havs(struct cpufreq_policy *policy, const char *buf, size_t count)
+{
+  char	*fields[3]={0};
+  int	f, nbFields=0;
+
+  fields[0]=(char *)buf;
+  for (f=0; (f<count) && (nbFields<3); f++) {
+    if (strchr(SEPARATORS, buf[f]) != NULL) {
+      // new field
+      nbFields++;
+      while ((strchr(SEPARATORS, buf[f])!=NULL) && (f<count)) {
+	f++;
+      }
+      fields[nbFields]=(char *)&buf[f];
+    }
+  }
+  if (f==count) {
+    nbFields++;
+  }
+
+  dprintk("nbFields=%d\n", nbFields);
+  for (f=0; f<nbFields; f++) {
+    dprintk("Field%d=%s - val=%d\n", f, fields[f], atoi(fields[f]));
+  }
+
+  // 2 possibilities. Either we have 2 fields containing +/- values.
+  // Either we have 3 fields containing the frequency, new min, and new max
+  if (nbFields==2) {
+    acpuclk_set_vdd_havs(0, atoi(fields[0]), atoi(fields[1]));
+  } else if (nbFields==3) {
+    acpuclk_set_vdd_havs(atoi(fields[0]), atoi(fields[1]), atoi(fields[2]));
+  }
+
+  return count;
+}
+#else
 extern ssize_t acpuclk_get_vdd_levels_str(char *buf);
 static ssize_t show_vdd_levels(struct cpufreq_policy *policy, char *buf)
 {
-return acpuclk_get_vdd_levels_str(buf);
+	return acpuclk_get_vdd_levels_str(buf);
 }
 
 extern void acpuclk_set_vdd(unsigned acpu_khz, int vdd);
 static ssize_t store_vdd_levels(struct cpufreq_policy *policy, const char *buf, size_t count)
 {
-int i = 0, j;
-int pair[2] = { 0, 0 };
-int sign = 0;
-
-if (count < 1)
-return 0;
-
-if (buf[0] == '-')
-{
-sign = -1;
-i++;
-}
-else if (buf[0] == '+')
-{
-sign = 1;
-i++;
-}
-
-for (j = 0; i < count; i++)
-{
-char c = buf[i];
-if ((c >= '0') && (c <= '9'))
-{
-pair[j] *= 10;
-pair[j] += (c - '0');
-}
-else if ((c == ' ') || (c == '\t'))
-{
-if (pair[j] != 0)
-{
-j++;
-if ((sign != 0) || (j > 1))
-break;
-}
-}
-else
-break;
-}
-
-if (sign != 0)
-{
-if (pair[0] > 0)
-acpuclk_set_vdd(0, sign * pair[0]);
-}
-else
-{
-if ((pair[0] > 0) && (pair[1] > 0))
-acpuclk_set_vdd((unsigned)pair[0], pair[1]);
-else
-return -EINVAL;
-}
-
-return count;
-}
+	int i = 0, j;
+	int pair[2] = { 0, 0 };
+	int sign = 0;
 
-extern unsigned int acpuclk_get_vdd_min(void);
-static ssize_t show_vdd_min(struct cpufreq_policy *policy, char *buf)
-{
-	return sprintf(buf, "%u\n", acpuclk_get_vdd_min());
-}
-
-extern unsigned int acpuclk_get_vdd_max(void);
-static ssize_t show_vdd_max(struct cpufreq_policy *policy, char *buf)
-{
-	return sprintf(buf, "%u\n", acpuclk_get_vdd_max());
-}
+	if (count < 1)
+		return 0;
 
-extern unsigned int acpuclk_get_vdd_step(void);
-static ssize_t show_vdd_step(struct cpufreq_policy *policy, char *buf)
-{
-	return sprintf(buf, "%u\n", acpuclk_get_vdd_step());
-}
+	if (buf[0] == '-')
+	{
+		sign = -1;
+		i++;
+	}
+	else if (buf[0] == '+')
+	{
+		sign = 1;
+		i++;
+	}
 
-#endif
+	for (j = 0; i < count; i++)
+	{
+		char c = buf[i];
+		if ((c >= '0') && (c <= '9'))
+		{
+			pair[j] *= 10;
+			pair[j] += (c - '0');
+		}
+		else if ((c == ' ') || (c == '\t'))
+		{
+			if (pair[j] != 0)
+			{
+				j++;
+				if ((sign != 0) || (j > 1))
+					break;
+			}
+		}
+		else
+			break;
+	}
 
-/**
- * show_scaling_driver - show the current cpufreq HW/BIOS limitation
- */
-static ssize_t show_bios_limit(struct cpufreq_policy *policy, char *buf)
-{
-	unsigned int limit;
-	int ret;
-	if (cpufreq_driver->bios_limit) {
-		ret = cpufreq_driver->bios_limit(policy->cpu, &limit);
-		if (!ret)
-			return sprintf(buf, "%u\n", limit);
+	if (sign != 0)
+	{
+		if (pair[0] > 0)
+			acpuclk_set_vdd(0, sign * pair[0]);
 	}
-	return sprintf(buf, "%u\n", policy->cpuinfo.max_freq);
+	else
+	{
+		if ((pair[0] > 0) && (pair[1] > 0))
+			acpuclk_set_vdd((unsigned)pair[0], pair[1]);
+		else
+			return -EINVAL;
+	}
+
+	return count;
 }
+#endif // AVS
+#endif // VDD_LEVELS
 
 cpufreq_freq_attr_ro_perm(cpuinfo_cur_freq, 0400);
 cpufreq_freq_attr_ro(cpuinfo_min_freq);
@@ -768,11 +817,12 @@
 cpufreq_freq_attr_rw(scaling_governor);
 cpufreq_freq_attr_rw(scaling_setspeed);
 #ifdef CONFIG_CPU_FREQ_VDD_LEVELS
+#ifdef CONFIG_MSM_CPU_AVS
+cpufreq_freq_attr_rw(vdd_levels_havs);
+#else
 cpufreq_freq_attr_rw(vdd_levels);
-cpufreq_freq_attr_ro(vdd_min);
-cpufreq_freq_attr_ro(vdd_max);
-cpufreq_freq_attr_ro(vdd_step);
-#endif
+#endif // AVS
+#endif // VDD_LEVELS
 
 static struct attribute *default_attrs[] = {
 	&cpuinfo_min_freq.attr,
@@ -787,11 +837,12 @@
 	&scaling_available_governors.attr,
 	&scaling_setspeed.attr,
 #ifdef CONFIG_CPU_FREQ_VDD_LEVELS
-	&vdd_levels.attr,
-	&vdd_min.attr,
-	&vdd_max.attr,
-	&vdd_step.attr,
-#endif
+#ifdef CONFIG_MSM_CPU_AVS
+	&vdd_levels_havs.attr,
+#else
+ 	&vdd_levels.attr,
+#endif // AVS
+#endif // VDD_LEVELS
 	NULL
 };
 
