--- arch/arm/mach-msm/qdsp6/pcm_in.c
+++ arch/arm/mach-msm/qdsp6/pcm_in.c
@@ -21,28 +21,45 @@
 #include <linux/sched.h>
 #include <linux/wait.h>
 #include <linux/uaccess.h>
+#include <linux/slab.h>
 
 #include <linux/msm_audio.h>
 
 #include <mach/msm_qdsp6_audio.h>
 
-#define BUFSZ (256)
 
-static DEFINE_MUTEX(pcm_in_lock);
-static uint32_t sample_rate = 8000;
-static uint32_t channel_count = 1;
-static uint32_t buffer_size = BUFSZ;
-static int pcm_in_opened = 0;
+#define AUDIO_SET_INCALL _IOW(AUDIO_IOCTL_MAGIC, 19, struct msm_voicerec_mode)
+#define AUDIO_FLAG_INCALL_MIXED       2
+
+#define AUDIO_GET_DEV_DRV_VER   _IOR(AUDIO_IOCTL_MAGIC, 56, unsigned)
+#define DEV_DRV_VER             (8250 << 16 | 1)
+
+struct pcm {
+	struct audio_client *ac;
+	uint32_t sample_rate;
+	uint32_t channel_count;
+	uint32_t buffer_size;
+	uint32_t rec_mode;
+};
+
+#define BUFSZ (256)
 
 void audio_client_dump(struct audio_client *ac);
 
 static long q6_in_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
+	struct pcm *pcm = file->private_data;
 	int rc = 0;
 
 	switch (cmd) {
 	case AUDIO_SET_VOLUME:
 		break;
+        case AUDIO_GET_DEV_DRV_VER: {
+                unsigned int vers = DEV_DRV_VER;
+                if (copy_to_user((void *) arg, &vers, sizeof(vers)))
+                        rc = -EFAULT;
+                break;
+        }
 	case AUDIO_GET_STATS: {
 		struct msm_audio_stats stats;
 		memset(&stats, 0, sizeof(stats));
@@ -61,17 +78,15 @@
 			break;
 		}
 
-		mutex_lock(&pcm_in_lock);
-		if (file->private_data) {
+		if (pcm->ac) {
 			rc = -EBUSY;
 		} else {
-			file->private_data = q6audio_open_pcm(
-				buffer_size, sample_rate, channel_count,
-				AUDIO_FLAG_READ, acdb_id);
-			if (!file->private_data)
+			pcm->ac = q6audio_open_pcm(pcm->buffer_size,
+					pcm->sample_rate, pcm->channel_count,
+					pcm->rec_mode, acdb_id);
+			if (!pcm->ac)
 				rc = -ENOMEM;
 		}
-		mutex_unlock(&pcm_in_lock);
 		break;
 	}
 	case AUDIO_STOP:
@@ -96,17 +111,32 @@
 			rc = -EINVAL;
 			break;
 		}
-		sample_rate = config.sample_rate;
-		channel_count = config.channel_count;
-		buffer_size = config.buffer_size;
+
+		pcm->sample_rate = config.sample_rate;
+		pcm->channel_count = config.channel_count;
+		pcm->buffer_size = config.buffer_size;
+		break;
+	}
+	case AUDIO_SET_INCALL: {
+		struct msm_voicerec_mode voicerec_mode;
+		if (copy_from_user(&voicerec_mode, (void *)arg,
+			sizeof(struct msm_voicerec_mode)))
+			return -EFAULT;
+		if (voicerec_mode.rec_mode != AUDIO_FLAG_READ &&
+			voicerec_mode.rec_mode != AUDIO_FLAG_INCALL_MIXED) {
+			pcm->rec_mode = AUDIO_FLAG_READ;
+			pr_err("invalid rec_mode\n");
+			rc = -EINVAL;
+		} else
+			pcm->rec_mode = voicerec_mode.rec_mode;
 		break;
 	}
 	case AUDIO_GET_CONFIG: {
 		struct msm_audio_config config;
-		config.buffer_size = buffer_size;
+		config.buffer_size = pcm->buffer_size;
 		config.buffer_count = 2;
-		config.sample_rate = sample_rate;
-		config.channel_count = channel_count;
+		config.sample_rate = pcm->sample_rate;
+		config.channel_count = pcm->channel_count;
 		config.unused[0] = 0;
 		config.unused[1] = 0;
 		config.unused[2] = 0;
@@ -123,32 +153,33 @@
 
 static int q6_in_open(struct inode *inode, struct file *file)
 {
-	int rc;
+	struct pcm *pcm;
 
 	pr_info("pcm_in: open\n");
-	mutex_lock(&pcm_in_lock);
-	if (pcm_in_opened) {
-		pr_err("pcm_in: busy\n");
-		rc = -EBUSY;
-	} else {
-		pcm_in_opened = 1;
-		rc = 0;
-	}
-	mutex_unlock(&pcm_in_lock);
-	return rc;
+	pcm = kzalloc(sizeof(struct pcm), GFP_KERNEL);
+
+	if (!pcm)
+		return -ENOMEM;
+
+	pcm->channel_count = 1;
+	pcm->sample_rate = 8000;
+	pcm->buffer_size = BUFSZ;
+	pcm->rec_mode = AUDIO_FLAG_READ;
+	file->private_data = pcm;
+	return 0;
 }
 
 static ssize_t q6_in_read(struct file *file, char __user *buf,
 			  size_t count, loff_t *pos)
 {
+	struct pcm *pcm = file->private_data;
 	struct audio_client *ac;
 	struct audio_buffer *ab;
 	const char __user *start = buf;
 	int xfer;
 	int res;
 
-	mutex_lock(&pcm_in_lock);
-	ac = file->private_data;
+	ac = pcm->ac;
 	if (!ac) {
 		res = -ENODEV;
 		goto fail;
@@ -181,20 +212,18 @@
 	}
 fail:
 	res = buf - start;
-	mutex_unlock(&pcm_in_lock);
-
 	return res;
 }
 
 static int q6_in_release(struct inode *inode, struct file *file)
 {
+
 	int rc = 0;
-	mutex_lock(&pcm_in_lock);
-	if (file->private_data)
-		rc = q6audio_close(file->private_data);
-	pcm_in_opened = 0;
-	mutex_unlock(&pcm_in_lock);
-	pr_info("pcm_in: release\n");
+	struct pcm *pcm = file->private_data;
+	if (pcm->ac)
+		rc = q6audio_close(pcm->ac);
+	kfree(pcm);
+	pr_info("pcm_out: release\n");
 	return rc;
 }
 
